МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 
Кафедра «Програмна інженерія»
 
 


ЗВІТ
з практичної роботи 1
з дисципліни «Аналіз та рефакторинг коду»
 


 





Виконав:                                                           	              	Прийняв:
ст. гр. ПЗПІ-23-5                                    	       	     	          Сокорчук І. П.
Висоцький І. О.










2025
1.1 Мета роботи
     Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду на мові програмування TypeScript, а також навчитися аналізувати та рефакторити код для покращення його якості.
     Завдання роботи:
1. Дослідити основні рекомендації для написання якісного коду у TypeScript
2. Продемонструвати ці рекомендації на практичних прикладах коду
3. Обґрунтувати кожну рекомендацію та надати детальні пояснення
4. Проаналізувати вплив рекомендацій на якість та підтримку коду
1.2 Хід роботи
1.2.1 Вступ: TypeScript
     TypeScript — це надбудова над JavaScript зі статичною типізацією. Його головна перевага — виявлення помилок ще на етапі розробки, до запуску програми.
     Чому важливе оформлення коду? По-перше, читабельність. Як показано на слайді, код має бути зрозумілим для інших розробників. По-друге, менше помилок — чіткі правила знижують кількість багів. По-третє, єдині стандарти в команді полегшують code review та інтеграцію нового коду.
1.2.2 Структура проєкту та Іменування
     Проєкт поділено на каталоги:
     • components/ — React-компоненти (PascalCase);
     • hooks/ — користувацькі хуки (camelCase);
     • services/ — логіка запитів до API;
     • types/ — TypeScript-типи;
     • constants/ — константи.
     Приклад:
✅ const currentDate = new Date();
❌ const d = new Date();
     Конвенції:
     • PascalCase — для компонентів і класів,
     • camelCase — для змінних і функцій,
     • UPPER_CASE — для констант.

1.2.3 Форматування та Інструменти
     Дотримання єдиного стилю спрощує читання та рев’ю.
Інструменти:
     • Prettier — автоматичне форматування;
     • ESLint — перевірка якості коду;
     • Husky — git hooks для контролю перед комітами;
     • SonarQube — аналіз якості в CI/CD.
     Основні правила: відступ 2 пробіли, крапка з комою обов’язкова, одинарні лапки, рядки до 100 символів.
1.2.4 React: Типізовані компоненти
     Інтерфейси визначають структуру даних, допомагаючи уникати помилок.
     Приклад:

1. interface User {
2. id: number;
3. name: string;
4. email: string;
5. }
6. async function getUser(id: number): Promise<User> { ... }
     IDE надає автодоповнення, а помилки виявляються ще до запуску програми.
1.2.5 Custom Hooks: Generic типи
     Типізація пропсів захищає від некоректного використання компонентів.
1. interface ButtonProps {
2. label: string;
3. onClick: () => void;
4. variant?: 'primary' | 'secondary';
5. }
6. const Button: React.FC<ButtonProps> = ({ label, onClick }) => (
7. <button onClick={onClick}>{label}</button>
8. );
     TypeScript підказує правильні типи й значення, забезпечуючи передбачувану поведінку.
1.2.6 Константи vs Magic Numbers
     Generic-хуки дозволяють повторно використовувати логіку:
1. export function useApi<T>(url: string): UseApiResult<T> { ... }
     Використання:
const { data, loading } = useApi<User[]>('/api/users');
Типізація забезпечує безпечну роботу з будь-якими даними.
1.2.7 Коментарі: JSDoc
     Коментарі пояснюють чому, а не що робиться:
1. /**
2. Обчислює вартість замовлення
3. @param items - масив товарів
4. @param coupon - код купону
5. @returns загальна сума
6. */
     JSDoc забезпечує підказки в IDE і робить код самодокументованим.
1.2.8 Node.js: API Endpoint
     Типізація запитів і відповідей:
     interface CreateUserRequest { email: string; name: string; password: string; }
     interface CreateUserResponse { id: number; email: string; createdAt: string; }
     Розділення коду на блоки: валідація, бізнес-логіка, відповідь.
Кожен модуль можна тестувати окремо.
1.2.9 Архітектура: Розділення логіки
     Код поділяється на types, hooks, components.
Це спрощує тестування, масштабування та підтримку.
Принцип: одна частина — одна відповідальність.
1.2.10 Висновки: Чистий код\
     Єдиний стиль коду покращує командну роботу.
     
     Типізація забезпечує надійність і зменшує кількість помилок.
     
     Модульність і використання custom hooks підвищують масштабованість.
     
     Інструменти Prettier, ESLint, Husky автоматизують контроль якості.
     
     Чистий код = швидка розробка + менше багів.
     


ВИКОРИСТАНІ ДЖЕРЕЛА
     1. TypeScript Official Documentation — typescriptlang.org/docs
     2. ESLint Documentation — eslint.org/docs
     3. Prettier · Opinionated Code Formatter — prettier.io
     4. React TypeScript Cheatsheet — react-typescript-cheatsheet.netlify.app
     5. Clean Code: A Handbook of Agile Software Craftsmanship — Robert C. Martin
     6. Airbnb JavaScript Style Guide — github.com/airbnb/javascript



ДОДАТОК А
ВІДЕОЗАПИС
https://youtu.be/zflXvU4aBZc


ДОДАТОК Б

Стр. 1 – Титульна сторінка

Стр. 2 – Вступ: TypeScript

Стр. 3 – Структура проєкту та Іменування

Стр. 4 – Форматування та Інструменти

Стр. 5 – TypeScript: Типізація

Стр. 6 – React: Типізовані компоненти

Стр. 7 – Custom Hooks: Generic типи

Стр. 8 – Константи vs Magic Numbers

Стр. 9 – Коментарі: JSDoc

Стр. 10 – Node.js: API Endpoint

Стр. 11 – Архітектура: Розділення логіки

Стр. 12 – Висновки: Чистий код

Стр. 13 – Використані джерела



2


